# This file is part of db2unit: A unit testing framework for Db2 LUW.
# Copyright (C)  2014  Andres Gomez Casanova (@AngocA)
#
# db2unit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# db2unit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Andres Gomez Casanova <angocaATyahooDOTcom>

# Travis file for Continuous integration.
#
# Version: 2014-04-30 V2_BETA
# Author: Andres Gomez Casanova (AngocA)
# Made in COLOMBIA.

# CASES means the test cases execution. True random, false sequential.
env:
  - ENV=release
  - ENV=test SUITES=seq CASES=FALSE
  - ENV=test SUITES=seq CASES=TRUE
  - ENV=test SUITES=random

before_install:
  # Parallel download
  - mvn > /dev/null &
  - sudo apt-get update -qq
  - sudo apt-get install aria2 curl -y
  - sudo ./src/test/travis/update > /dev/null &

  # Retrieves and extracts the Dn2 binaries
  # If it does not work, change it according to the next page:
  # https://github.com/angoca/db2-docker/wiki/db2-link-server_t
  - DOWNLOAD_LINK=$(curl --url https://raw.githubusercontent.com/wiki/angoca/db2unit/DB2-Download-link.md -s | tail -1) ; echo ${DOWNLOAD_LINK} ; cd /tmp ; aria2c -x 16 ${DOWNLOAD_LINK} ; tar zxvf v*_linuxx64_server_t.tar.gz

  # Retrieves and extract log4db2
  - cd ; wget https://github.com/angoca/log4db2/releases/download/log4db2-1-Beta-A/log4db2.tar.gz ; tar zxvf log4db2.tar.gz


  # INSTALL

  # Waits for the update to finish
  - while [ ! -r /tmp/finished_update ] ; do sleep 1 ; done

  # Installs the required libraries
  - sudo apt-get install rpm binutils libaio1 lib32stdc++6 -y
  - sudo apt-get install -qq libpam-ldap:i386
  - sudo ln -s /lib/i386-linux-gnu/libpam.so.0 /lib/libpam.so.0

  # Checks the prerequisites
  - cd /tmp/server_t ; ./db2prereqcheck -l -i
  # Install Dn2 and creates an instance (Response file)
  - sudo ./db2setup -r ${TRAVIS_BUILD_DIR}/src/test/travis/db2.rsp || cat /tmp/db2setup.log
  # Changes the security
  - sudo usermod -a -G db2iadm1 $USER
  - sudo chsh -s /bin/bash db2inst1
  - sudo su - db2inst1 -c "db2 update dbm cfg using SYSADM_GROUP db2iadm1 ; db2stop ; db2start"
  # Creates the database
  - sudo su - db2inst1 -c "db2 create db db2unit ; db2 connect to db2unit ; db2 grant dbadm on database to user $USER"
  - . ~db2inst1/sqllib/db2profile ; db2 connect to db2unit ; db2 update db cfg using CATALOGCACHE_SZ 2048

install:
  # Install log4db2
  - cd ; cd log4db2 ; . ./install

  # Install db2unit
  - cd ${TRAVIS_BUILD_DIR}
  - bash -c "if [ '$ENV' = 'release' ]; then mvn ; db2 connect to db2unit ; cd target/db2unit/db2unit ; . ./install ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; cd src/test/scripts ; . ./init-dev ; cd ../../main/scripts ; . ./install ; fi"
  - cd src/test/scripts ; . ./init-dev
  - db2 "CREATE TABLESPACE SYSTOOLSPACE IN IBMCATGROUP MANAGED BY AUTOMATIC STORAGE USING STOGROUP IBMSTOGROUP EXTENTSIZE 4"

  # Install the tests
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_EMPTY.sql                  ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_EXECUTION.sql              ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_EXECUTION_2.sql            ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_ASSERTIONS_GENERAL.sql     ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_ASSERTIONS_BOOLEAN.sql     ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_ASSERTIONS_DATETIME.sql    ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_ASSERTIONS_NUMBER.sql      ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_ASSERTIONS_STRING.sql      ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_ASSERTIONS_STRING_LONG.sql ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_ASSERTIONS_TABLE.sql       ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_ASSERTIONS_XML.sql         ; echo 'ok' ; fi"
  - bash -c "if [ '$ENV' = 'test' ]; then db2 connect to db2unit ; db2 -tf ../sql-pl/Tests_DB2UNIT_TAP.sql                    ; echo 'ok' ; fi"
  - bash -c "if [ '$SUITES' = 'random' ]; then db2 connect to db2unit ; db2 \"call db2unit.export_tests_list\"; sudo chmod +x /tmp/listOfTestSuites ; sudo chmod +x /tmp/returnCode ; cat /tmp/listOfTestSuites ; fi"

script:
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_EMPTY')\"                 ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_EXECUTION')\"             ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_EXECUTION_2')\"           ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_ASSERTIONS_GENERAL')\"    ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_ASSERTIONS_BOOLEAN')\"    ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_ASSERTIONS_DATETIME')\"   ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_ASSERTIONS_NUMBER')\"     ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_ASSERTIONS_STRING')\"     ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_ASSERTIONS_STRING_LONG')\"; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_ASSERTIONS_TABLE')\"      ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
# TODO correct
#  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_ASSERTIONS_XML')\"        ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"
  - bash -c "if [ '$SUITES' = 'seq' ]; then db2 connect to db2unit ; db2 \"call db2unit.random_sort($CASES)\" ; db2 -r /tmp/db2unit.output \"call db2unit.run_suite('DB2UNIT_TAP')\"                   ; db2 \"call db2unit.get_last_execution_order()\" ; bash -c \"exit \$(tail -1 /tmp/db2unit.output | awk '/Return Status/ {print \$4}')\"; fi"

  - bash -c "if [ '$SUITES' = 'random' ]; then db2 connect to db2unit ; . /tmp/listOfTestSuites ; /tmp/returnCode ; fi"

after_script:
  - . ~db2inst1/sqllib/db2profile ; db2 "CALL DB2UNIT.REPORT_RECENT_EXECUTIONS"

after_failure:
  # If there is any error, shows the logs
  - db2 "call logadmin.logs"
  - db2 "select * from DB2UNIT_2_BETA.EXECUTION_REPORTS"
  - db2 "select * from DB2UNIT_EMPTY.REPORT_TESTS"
  - db2 "select * from DB2UNIT_EXECUTION.REPORT_TESTS"
  - db2 "select * from DB2UNIT_EXECUTION_2.REPORT_TESTS"
  - db2 "select * from DB2UNIT_ASSERTIONS_GENERAL.REPORT_TESTS"
  - db2 "select * from DB2UNIT_ASSERTIONS_BOOLEAN.REPORT_TESTS"
  - db2 "select * from DB2UNIT_ASSERTIONS_DATETIME.REPORT_TESTS"
  - db2 "select * from DB2UNIT_ASSERTIONS_NUMBER.REPORT_TESTS"
  - db2 "select * from DB2UNIT_ASSERTIONS_STRING.REPORT_TESTS"
  - db2 "select * from DB2UNIT_ASSERTIONS_STRING_LONG.REPORT_TESTS"
  - db2 "select * from DB2UNIT_ASSERTIONS_TABLE.REPORT_TESTS"
#  - db2 "select * from DB2UNIT_ASSERTIONS_XML.REPORT_TESTS"
  - db2 "select * from DB2UNIT_TAP.REPORT_TESTS"
  - db2 "export to /tmp/sorts.txt of del select * from DB2UNIT_2_BETA.sorts" ; cat /tmp/sorts.txt
  - cat /home/db2inst1/sqllib/db2dump/db2diag.log

