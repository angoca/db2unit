--#SET TERMINATOR ;

/*
 This file is part of db2unit: A unit testing framework for DB2 LUW.
 Copyright (C)  2014  Andres Gomez Casanova (@AngocA)

 db2unit is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 db2unit is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 Andres Gomez Casanova <angocaATyahooDOTcom>
*/

SET CURRENT SCHEMA DB2UNIT_1;

/**
 * Defines the headers of the public routines.
 *
 * Version: 2014-04-30 1
 * Author: Andres Gomez Casanova (AngocA)
 * Made in COLOMBIA.
 */

-- Module for db2unit framework objects.
CREATE OR REPLACE MODULE DB2UNIT;

COMMENT ON MODULE DB2UNIT IS 'Objects for the db2unit utility';

CREATE OR REPLACE PUBLIC ALIAS DB2UNIT FOR MODULE DB2UNIT;

COMMENT ON PUBLIC ALIAS DB2UNIT FOR MODULE IS 'Public objects of db2unit';

-- Utility schema.
ALTER MODULE DB2UNIT PUBLISH
  VARIABLE UTILITY_SCHEMA VARCHAR(16) CONSTANT 'DB2UNIT_1';

-- License.
ALTER MODULE DB2UNIT PUBLISH
  VARIABLE LICENSE VARCHAR(80) CONSTANT
  'db2unit is licensed under the terms of the GPL v3';

-- Report table name constant.
ALTER MODULE DB2UNIT PUBLISH
  VARIABLE REPORTS_TABLE VARCHAR(16) CONSTANT 'REPORT_TESTS';

-- Transaction execution mode.
ALTER MODULE DB2UNIT PUBLISH
  VARIABLE AUTONOMOUS_EXEC BOOLEAN DEFAULT TRUE;

-- Execute one test from the test suite.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE RUN_SUITE (
  IN SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME,
  IN PREV_EXEC_ID ANCHOR EXECUTION_REPORTS.EXECUTION_ID DEFAULT NULL,
  IN TEST_NAME ANCHOR SYSCAT.PROCEDURES.PROCNAME DEFAULT NULL
  );

-- Execute the test suite.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE RUN_SUITE (
  IN SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME,
  IN PREV_EXEC_ID ANCHOR EXECUTION_REPORTS.EXECUTION_ID DEFAULT NULL
  );

-- Returns the last execution ID.
ALTER MODULE DB2UNIT PUBLISH
  FUNCTION GET_LAST_EXEC_ID (
  ) RETURNS ANCHOR EXECUTION_REPORTS.EXECUTION_ID;

-- Register a test suite.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE REGISTER_SUITE (
  IN SCHEMA_NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME
  );

-- Clean the environment.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE CLEAN (
  );

-- Clean the last assertion result.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE CLEAN_TEST_RESULT (
  );

-- Reset framework tables.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE RESET_TABLES (
  );

-- Release lock for a suite.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE RELEASE_LOCK (
  NAME ANCHOR SYSCAT.SCHEMATA.SCHEMANAME
  );

-- Release all locks.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE RELEASE_LOCKS (
  );

-- Change transaction autonomous mode.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE SET_AUTONOMOUS (
  IN AUTONOMOUS BOOLEAN
  );

-- Change procedure sort type.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE RANDOM_SORT (
  IN RANDOM BOOLEAN
  );

-- Export registered tests to a Linux executable file.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE EXPORT_TESTS_LIST (
  );

-- Show program license.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE LICENSE (
  );

-- GENERAL

-- Register a name for tests without assertions.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE REGISTER_MESSAGE(
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT
  );

-- Fail current test.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE FAIL (
  );

-- Fail current test with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE FAIL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT
  );

-- STRING

-- Assert two strings are equal.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_STRING_EQUALS (
  IN EXPECTED ANCHOR MAX_STRING.STRING,
  IN ACTUAL ANCHOR MAX_STRING.STRING
  );

-- Assert two strings are equal with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_STRING_EQUALS (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN EXPECTED ANCHOR MAX_STRING.STRING,
  IN ACTUAL ANCHOR MAX_STRING.STRING
  );

-- Assert string is null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_STRING_NULL (
  IN STRING ANCHOR MAX_STRING.STRING
  );

-- Assert string is null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_STRING_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN STRING ANCHOR MAX_STRING.STRING
  );

-- Assert string is not null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_STRING_NOT_NULL (
  IN STRING ANCHOR MAX_STRING.STRING
  );

-- Assert string is not null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_STRING_NOT_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN STRING ANCHOR MAX_STRING.STRING
  );

-- BOOLEAN

-- Assert two booleans are equal.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_BOOLEAN_EQUALS (
  IN EXPECTED BOOLEAN,
  IN ACTUAL BOOLEAN
  );

-- Assert two booleans are equal with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_BOOLEAN_EQUALS (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN EXPECTED BOOLEAN,
  IN ACTUAL BOOLEAN
  );

-- Assert boolean is true.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_BOOLEAN_TRUE (
  IN VALUE BOOLEAN
  );

-- Assert boolean is true with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_BOOLEAN_TRUE (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE BOOLEAN
  );

-- Assert boolean is false.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_BOOLEAN_FALSE (
  IN CONDITION BOOLEAN
  );

-- Assert boolean is false with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_BOOLEAN_FALSE (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN CONDITION BOOLEAN
  );

-- Assert boolean is null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_BOOLEAN_NULL (
  IN CONDITION BOOLEAN
  );

-- Assert boolean is null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_BOOLEAN_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN CONDITION BOOLEAN
  );

-- Assert boolean is not null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_BOOLEAN_NOT_NULL (
  IN CONDITION BOOLEAN
  );

-- Assert boolean is not null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_BOOLEAN_NOT_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN CONDITION BOOLEAN
  );

-- INTEGER

-- Assert two integers are equal.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_INT_EQUALS (
  IN EXPECTED BIGINT,
  IN ACTUAL BIGINT
  );

-- Assert two integers are equal with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_INT_EQUALS (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN EXPECTED BIGINT,
  IN ACTUAL BIGINT
  );

-- Assert integer is null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_INT_NULL (
  IN VALUE BIGINT
  );

-- Assert integer is null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_INT_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE BIGINT
  );

-- Assert integer is not null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_INT_NOT_NULL (
  IN VALUE BIGINT
  );

-- Assert integer is not null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_INT_NOT_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE BIGINT
  );

-- DECIMAL

-- Assert two decimals are equal.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DEC_EQUALS (
  IN EXPECTED DECFLOAT,
  IN ACTUAL DECFLOAT
  );

-- Assert two decimals are equal with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DEC_EQUALS (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN EXPECTED DECFLOAT,
  IN ACTUAL DECFLOAT
  );

-- Assert decimal is null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DEC_NULL (
  IN VALUE DECFLOAT
  );

-- Assert decimal is null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DEC_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE DECFLOAT
  );

-- Assert decimal is not null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DEC_NOT_NULL (
  IN VALUE DECFLOAT
  );

-- Assert decimal is not null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DEC_NOT_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE DECFLOAT
  );

-- TABLES

-- Assert two tables are equal.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TABLE_EQUALS (
  IN EXPECTED_SCHEMA ANCHOR SYSCAT.TABLES.TABSCHEMA,
  IN EXPECTED_TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME,
  IN ACTUAL_SCHEMA ANCHOR SYSCAT.TABLES.TABSCHEMA,
  IN ACTUAL_TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME
  );

-- Assert two tables are equal with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TABLE_EQUALS (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN EXPECTED_SCHEMA ANCHOR SYSCAT.TABLES.TABSCHEMA,
  IN EXPECTED_TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME,
  IN ACTUAL_SCHEMA ANCHOR SYSCAT.TABLES.TABSCHEMA,
  IN ACTUAL_TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME
  );

-- Assert table is empty.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TABLE_EMPTY (
  IN SCHEMA ANCHOR SYSCAT.TABLES.TABSCHEMA,
  IN TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME
  );

-- Assert table is empty with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TABLE_EMPTY (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN SCHEMA ANCHOR SYSCAT.TABLES.TABSCHEMA,
  IN TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME
  );

-- Assert table is not empty.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TABLE_NON_EMPTY (
  IN SCHEMA ANCHOR SYSCAT.TABLES.TABSCHEMA,
  IN TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME
  );

-- Assert table is not empty with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TABLE_NON_EMPTY (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN SCHEMA ANCHOR SYSCAT.TABLES.TABSCHEMA,
  IN TABLE_NAME ANCHOR SYSCAT.TABLES.TABNAME
  );

-- DATETIMES (TIMESTAMP)

-- Assert two timestamps are equal.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIMESTAMP_EQUALS (
  IN EXPECTED TIMESTAMP,
  IN ACTUAL TIMESTAMP
  );

-- Assert two timestamps are equal with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIMESTAMP_EQUALS (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN EXPECTED TIMESTAMP,
  IN ACTUAL TIMESTAMP
  );

-- Assert timestamp is null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIMESTAMP_NULL (
  IN VALUE TIMESTAMP
  );

-- Assert timestamp is null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIMESTAMP_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE TIMESTAMP
  );

-- Assert timestamp is not null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIMESTAMP_NOT_NULL (
  IN VALUE TIMESTAMP
  );

-- Assert timestamp is not null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIMESTAMP_NOT_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE TIMESTAMP
  );

-- DATETIMES (DATE)

-- Assert two dates are equal.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DATE_EQUALS (
  IN EXPECTED DATE,
  IN ACTUAL DATE
  );

-- Assert two dates are equal with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DATE_EQUALS (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN EXPECTED DATE,
  IN ACTUAL DATE
  );

-- Assert date is null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DATE_NULL (
  IN VALUE DATE
  );

-- Assert date is null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DATE_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE DATE
  );

-- Assert date is not null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DATE_NOT_NULL (
  IN VALUE DATE
  );

-- Assert date is not null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_DATE_NOT_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE DATE
  );

-- DATETIMES (TIME)

-- Assert two times are equal.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIME_EQUALS (
  IN EXPECTED TIME,
  IN ACTUAL TIME
  );

-- Assert two times are equal with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIME_EQUALS (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN EXPECTED TIME,
  IN ACTUAL TIME
  );

-- Assert time is null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIME_NULL (
  IN VALUE TIME
  );

-- Assert time is null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIME_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE TIME
  );

-- Assert time is not null.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIME_NOT_NULL (
  IN VALUE TIME
  );

-- Assert time is not null with message.
ALTER MODULE DB2UNIT PUBLISH
  PROCEDURE ASSERT_TIME_NOT_NULL (
  IN MESSAGE ANCHOR MAX_VALUES.MESSAGE_ASSERT,
  IN VALUE TIME
  );

